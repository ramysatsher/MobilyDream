(window["arcWidgetJsonp"]=window["arcWidgetJsonp"]||[]).push([["widget-sc-client"],{b07c:function(t,s,e){"use strict";e.r(s);var i=e("ade3"),o=e("faa1"),r=e.n(o),n=e("517b"),a=e("5ff7");const c=e("7812"),h=(console.log,"overmind"),u={STATUS_REPORT:h+".statusReport",UPDATE_SWARM_CONFIG:h+".updateSwarmConfig",TASK_RESULT:h+".taskResult",DISCONNECT:h+".disconnect"},d=20,p={GET_SWARM_CONFIG:h+".get_swarm_config"},l=t=>`${h}.performTask.${t}`;function T(t={}){const s=c.create({hostname:"socket.arc.io",port:Number("443"),...t});return s}async function f(t,s,e){for await(const i of t.listener(s))e(i)}const m=(t,s)=>`${t}/${s}`;function k(t,s=d){const e=g(0,s),i=m(t,e);return i}function g(t,s){return Math.floor(Math.random()*(s-t+1)+t)}var R=e("a5a5"),S=e("8c32");const y=e("34eb")("arc:p2p-client"),{REPORT_NODE_STATUS:_,GET_SWARM_CONFIG:w}=p;class O extends r.a{constructor(t){super(),Object(i["a"])(this,"sendStatusReport",Object(n["a"])(async(t=R["h"])=>{if(this.isDestroyed)return;const s=await this.p2pClient.getStatusReport();s.config=this.config,s.tasks=this.tasks,y("statusReport",s);try{const e=u.STATUS_REPORT,i=k(e);await this.socket.invokePublish(i,s),this._trackMessageHistory(i,"send")}catch(e){y(e),this.isFirstStatusReport&&(this.isFirstStatusReport=!1,await this.sendStatusReportViaHTTP(s),this._trackMessageHistory("statusReportHttp","send"))}finally{clearTimeout(this.reportTimeoutId),this.reportTimeoutId=setTimeout(this.sendStatusReport,t)}},1e4)),Object(i["a"])(this,"onSendReportsPublish",()=>{const t=1e3*b(0,60),s=b(0,R["h"]/2),e=Math.random()>.5?1:-1,i=R["h"]+s*e;setTimeout(()=>this.sendStatusReport(i),t)}),this.p2pClient=t,this.tasks=[],this.msgHistory=[],this.config={isAcceptingTasks:!0,maxFilesSeeding:R["f"]},this.isFirstStatusReport=!0,this.isDestroyed=!1,this.reportTimeoutId=null}async _queueTask(t){const{length:s}=this.tasks;this.tasks.push(t),0===s&&this._performTasks(this.tasks)}async _performTasks(t){while(t.length>0){const s=t[0],e=await this._performTask(s);s.returnResult&&this._sendTaskResult(s.id,e),t.shift()}this.sendStatusReport()}async _performTask(t){y("Perfoming task",t);const{timeout:s=5e3}=t;let e;try{const i=this.p2pClient.performTask(t);e=await Object(S["h"])(i,s)}catch(i){y("task err",i),e=i instanceof Error?Object(S["d"])(i):"Error: "+i}return e}async _sendTaskResult(t,s){const e=u.TASK_RESULT,i=k(e);this.socket.transmitPublish(i,{taskId:t,result:s})}async sendStatusReportViaHTTP(t){const s=a["a"].NODE_REPORT_MAILBOX_ORIGIN+"/mailbox/statusReport";await fetch(s,{method:"POST",headers:{"Content-Type":"text/plain;charset=UTF-8"},body:JSON.stringify({statusReport:t})})}async getSwarmConfig(){let t={};try{t=await this.session.call(w),Object.assign(this.config,t)}catch(s){y(s)}return t}_registerEvents(t){f(t,"close",t=>{y("socket closed",t)}),f(t,"error",({error:t})=>{y("socket err",t)}),f(t,"message",({message:t})=>{this._trackMessageHistory(t,"receive")});const{nodeId:s}=this.p2pClient,e=l(s);(async()=>{for await(const s of t.subscribe(e))this._queueTask(s)})()}_trackMessageHistory(t,s){const e=100;this.msgHistory.push({[s]:t,at:new Date}),this.msgHistory.length>e&&this.msgHistory.shift()}async connect(){const{nodeId:t}=this.p2pClient,s=T({secure:!0,query:{nodeId:t}});this.socket=s,this._registerEvents(s);try{const t=await s.listener("connect").once();y("Socket connected",t)}catch(e){y("Socket connection err",e)}}disconnect(){this.socket.disconnect()}destroy(){this.isDestroyed=!0,this.disconnect(),this.removeAllListeners(),clearTimeout(this.reportTimeoutId)}}function b(t,s){return Math.floor(Math.random()*(s-t+1)+t)}s["default"]=O}}]);